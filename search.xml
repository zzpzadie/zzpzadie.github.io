<?xml version="1.0" encoding="utf-8"?>
<search>



    <entry>
      <title>stash</title>
      <link href="/2024/07/17/GIt/stash/"/>
      <url>/2024/07/17/GIt/stash/</url>

        <content type="html"><![CDATA[<h3 id="相关命令："><a href="#相关命令：" class="headerlink" title="相关命令："></a>相关命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保存当前未commit的代码</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存当前未commit的代码并添加备注</span></span><br><span class="line">git stash save <span class="string">&quot;备注的内容&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出stash的所有记录</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除stash的所有记录</span></span><br><span class="line">git stash clear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用最近一次的stash</span></span><br><span class="line">git stash apply</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用最近一次的stash，随后删除该记录</span></span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除最近的一次stash</span></span><br><span class="line">git stash drop</span><br></pre></td></tr></table></figure><h3 id="当有多条-stash，可以指定操作stash，首先使用stash-list-列出所有记录："><a href="#当有多条-stash，可以指定操作stash，首先使用stash-list-列出所有记录：" class="headerlink" title="当有多条 stash，可以指定操作stash，首先使用stash list 列出所有记录："></a>当有多条 stash，可以指定操作stash，首先使用stash list 列出所有记录：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash list</span><br><span class="line"><span class="comment">#效果：</span></span><br><span class="line">stash@&#123;0&#125;: WIP on ...</span><br><span class="line">stash@&#123;1&#125;: WIP on ...</span><br><span class="line">stash@&#123;2&#125;: On ...</span><br></pre></td></tr></table></figure><h3 id="应用第二条记录："><a href="#应用第二条记录：" class="headerlink" title="应用第二条记录："></a>应用第二条记录：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash apply stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> Git </category>

      </categories>


    </entry>



    <entry>
      <title>Echart-xAxis. axisLabel</title>
      <link href="/2024/07/08/vue3/Echarts/Echarts-xAxis.%20axisLabel/"/>
      <url>/2024/07/08/vue3/Echarts/Echarts-xAxis.%20axisLabel/</url>

        <content type="html"><![CDATA[<ul><li>显示</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure><ul><li>标签高度(整个图不够高时可以给grid加height)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">height: 45,</span><br></pre></td></tr></table></figure><ul><li>标签换行：换行字符串之间加 + “\n” +</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">formatter: <span class="keyword">function</span> (val) &#123;</span><br><span class="line">   <span class="built_in">let</span> <span class="built_in">date</span> = new Date(val);</span><br><span class="line">   <span class="built_in">let</span> year = date.getFullYear();</span><br><span class="line">   <span class="built_in">let</span> month = date.getMonth() + 1; // 月份是从0开始的，所以要加1</span><br><span class="line">   <span class="built_in">let</span> day = date.getDate();</span><br><span class="line">   <span class="built_in">let</span> hours = (<span class="string">&quot;0&quot;</span> + date.getHours()).slice(-2);</span><br><span class="line">   <span class="built_in">let</span> minutes = (<span class="string">&quot;0&quot;</span> + date.getMinutes()).slice(-2);</span><br><span class="line">   <span class="built_in">let</span> seconds = (<span class="string">&quot;0&quot;</span> + date.getSeconds()).slice(-2);</span><br><span class="line">   <span class="built_in">let</span> laststring = `<span class="variable">$&#123;hours&#125;</span>:<span class="variable">$&#123;minutes&#125;</span>:<span class="variable">$&#123;seconds&#125;</span>` + <span class="string">&quot;\n&quot;</span> + `<span class="variable">$&#123;year&#125;</span>/<span class="variable">$&#123;month&#125;</span>/<span class="variable">$&#123;day&#125;</span>`</span><br><span class="line">   <span class="built_in">return</span> laststring;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p><img src="/./image/axisLabel.png"></p>]]></content>


      <categories>

          <category> Echart </category>

          <category> xAxis </category>

          <category> axisLabel </category>

      </categories>


    </entry>



    <entry>
      <title>JS方法</title>
      <link href="/2024/07/04/JS%E6%96%B9%E6%B3%95/JS%E6%96%B9%E6%B3%95/"/>
      <url>/2024/07/04/JS%E6%96%B9%E6%B3%95/JS%E6%96%B9%E6%B3%95/</url>

        <content type="html"><![CDATA[<h1 id="生成随机-409EFF这样的颜色参数"><a href="#生成随机-409EFF这样的颜色参数" class="headerlink" title="生成随机#409EFF这样的颜色参数"></a>生成随机#409EFF这样的颜色参数</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">generateRandomColor</span></span>() &#123;</span><br><span class="line">  const r = Math.floor(Math.random() * 256);</span><br><span class="line">  const g = Math.floor(Math.random() * 256);</span><br><span class="line">  const b = Math.floor(Math.random() * 256);</span><br><span class="line">  <span class="built_in">return</span> <span class="string">&#x27;#&#x27;</span> + r.toString(16).padStart(2, <span class="string">&#x27;0&#x27;</span>) + g.toString(16).padStart(2, <span class="string">&#x27;0&#x27;</span>) + b.toString(16).padStart(2, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间戳1717201004000转换为’2021-06-18’格式"><a href="#时间戳1717201004000转换为’2021-06-18’格式" class="headerlink" title="时间戳1717201004000转换为’2021-06-18’格式"></a>时间戳1717201004000转换为’2021-06-18’格式</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> formatTimestamp(timestamp) &#123;</span><br><span class="line">  const <span class="built_in">date</span> = new Date(timestamp / 1000);</span><br><span class="line">  const isoString = date.toISOString();</span><br><span class="line">  const year = isoString.slice(0, 4);</span><br><span class="line">  const month = isoString.slice(5, 7);</span><br><span class="line">  const day = isoString.slice(8, 10);</span><br><span class="line">  <span class="built_in">return</span> `<span class="variable">$&#123;year&#125;</span>-<span class="variable">$&#123;month&#125;</span>-<span class="variable">$&#123;day&#125;</span>`;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象返回数组-只包含值，不包含键"><a href="#对象返回数组-只包含值，不包含键" class="headerlink" title="对象返回数组(只包含值，不包含键)"></a>对象返回数组(只包含值，不包含键)</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Object.values(groupedData) 是一个JavaScript表达式，用于获取对象 groupedData 中所有属性的值，并将它们作为数组返回。</span></span><br><span class="line"><span class="comment">#例如，假设我们有以下对象：</span></span><br><span class="line">const groupedData = &#123;</span><br><span class="line">  key1: <span class="string">&#x27;value1&#x27;</span>,</span><br><span class="line">  key2: <span class="string">&#x27;value2&#x27;</span>,</span><br><span class="line">  key3: <span class="string">&#x27;value3&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">#使用 Object.values(groupedData) 将返回一个数组，包含这些键对应的值：</span></span><br><span class="line">[<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;value3&#x27;</span>]</span><br></pre></td></tr></table></figure><h1 id="日期字符串转换为时间戳（从1970年1月1日00-00-00-UTC（协调世界时）到该日期的毫秒数）"><a href="#日期字符串转换为时间戳（从1970年1月1日00-00-00-UTC（协调世界时）到该日期的毫秒数）" class="headerlink" title="日期字符串转换为时间戳（从1970年1月1日00:00:00 UTC（协调世界时）到该日期的毫秒数）"></a>日期字符串转换为时间戳（从1970年1月1日00:00:00 UTC（协调世界时）到该日期的毫秒数）</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Date.parse(item.startTime)</span><br></pre></td></tr></table></figure><h1 id="Date-val-是-JavaScript-中用于创建一个新的日期对象的构造函数。它接受一个参数-val，该参数可以是以下几种类型："><a href="#Date-val-是-JavaScript-中用于创建一个新的日期对象的构造函数。它接受一个参数-val，该参数可以是以下几种类型：" class="headerlink" title="Date(val) 是 JavaScript 中用于创建一个新的日期对象的构造函数。它接受一个参数 val，该参数可以是以下几种类型："></a>Date(val) 是 JavaScript 中用于创建一个新的日期对象的构造函数。它接受一个参数 val，该参数可以是以下几种类型：</h1><p>字符串：表示日期的字符串，如 “2022-08-15” 或 “August 15, 2022”。<br>数字：表示从1970年1月1日00:00:00 UTC开始的毫秒数。<br>多个数字：分别表示年、月、日、小时、分钟、秒和毫秒。<br>包含日期组件的对象：具有年份、月份、日期、小时、分钟、秒和毫秒属性的对象。<br>例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 使用字符串创建日期对象</span><br><span class="line">var date1 = new Date(<span class="string">&quot;2022-08-15&quot;</span>);</span><br><span class="line">console.log(date1); // 输出：Tue Aug 15 2022 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">// 使用毫秒数创建日期对象</span><br><span class="line">var date2 = new Date(1628956800000);</span><br><span class="line">console.log(date2); // 输出：Tue Aug 15 2022 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">// 使用多个数字创建日期对象</span><br><span class="line">var date3 = new Date(2022, 7, 15, 12, 30, 45);</span><br><span class="line">console.log(date3); // 输出：Mon Aug 15 2022 12:30:45 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">// 使用包含日期组件的对象创建日期对象</span><br><span class="line">var date4 = new Date(&#123;year: 2022, month: 7, day: 15, hour: 12, minute: 30, second: 45&#125;);</span><br><span class="line">console.log(date4); // 输出：Mon Aug 15 2022 12:30:45 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> JS </category>

          <category> JS方法 </category>

      </categories>


    </entry>



    <entry>
      <title>1.校验pattern</title>
      <link href="/2024/06/29/vue3/input/%E6%A0%A1%E9%AA%8C/"/>
      <url>/2024/06/29/vue3/input/%E6%A0%A1%E9%AA%8C/</url>

        <content type="html"><![CDATA[<h2 id="1-手机号校验："><a href="#1-手机号校验：" class="headerlink" title="1.手机号校验："></a>1.手机号校验：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; pattern: /^1[3|4|5|6|7|8|9][0-9]\d&#123;8&#125;$/, message: <span class="string">&quot;请输入正确的手机号码&quot;</span>, trigger: <span class="string">&quot;blur&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="2-正整数："><a href="#2-正整数：" class="headerlink" title="2.正整数："></a>2.正整数：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;pattern: /^[0-9]+$/, message: <span class="string">&#x27;请输入0-9范围内的数字&#x27;</span>, trigger: <span class="string">&#x27;blur&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;pattern: /^\+?[1-9]\d*$/, message:<span class="string">&quot;必须为大于零的正整数&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#1个或多个连续的数字字符，不包括负号和小数点。它只允许整数。</span></span><br><span class="line">&#123; pattern: /^\d+$/, message: <span class="string">&quot;必须为整数&quot;</span>, trigger: <span class="string">&quot;blur&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#它允许整数和浮点数负数</span></span><br><span class="line">&#123;pattern: /^-?\d+(\.\d+)?$/, message: <span class="string">&#x27;只能为数字&#x27;</span>, trigger: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-范围："><a href="#3-范围：" class="headerlink" title="3.范围："></a>3.范围：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;pattern: /^(0.\d+|0|1)$/,message: <span class="string">&#x27;请输入0-1范围内的数字&#x27;</span>,trigger: <span class="string">&#x27;blur&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="4-数字长度："><a href="#4-数字长度：" class="headerlink" title="4.数字长度："></a>4.数字长度：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; pattern: /^\d&#123;5&#125;$/, message: <span class="string">&quot;请输入5位数字&quot;</span>, trigger: <span class="string">&quot;blur&quot;</span> &#125;</span><br><span class="line">&#123; pattern: /^.&#123;5,20&#125;$/, message: <span class="string">&quot;长度必须介于 5 和 20 之间&quot;</span>, trigger: <span class="string">&quot;blur&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="5-构成："><a href="#5-构成：" class="headerlink" title="5.构成："></a>5.构成：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;pattern: /^[A-Za-z0-9\-_]+$/,message: <span class="string">&quot;必须由数字、字母或- _构成&quot;</span>,trigger: <span class="string">&quot;blur&quot;</span>,&#125;,</span><br><span class="line">&#123;pattern: /^[0-9\A-Z\a-z\u4e00-\u9fa5]+$/,message: <span class="string">&quot;只能包含中文、英文和数字&quot;</span>,trigger: <span class="string">&quot;blur&quot;</span>,&#125;</span><br><span class="line">&#123; pattern: /^[0-9\A-Z\a-z\-\_]+$/, message: <span class="string">&quot;必须是英文数字字符&quot;</span>, trigger: <span class="string">&quot;blur&quot;</span> &#125;</span><br><span class="line">&#123;pattern: /^(?:[1-9]\d&#123;0,3&#125;|9999)$/, message: <span class="string">&#x27;只能输入数字，且大于0小于10000&#x27;</span>, trigger: <span class="string">&#x27;change&#x27;</span>&#125;</span><br><span class="line">&#123;pattern: /^(?:[1-9]\d&#123;0,3&#125;|65534)$/, message: <span class="string">&quot;大于0，小于65535&quot;</span>, trigger: <span class="string">&quot;change&quot;</span>&#125;</span><br><span class="line">&#123;pattern: /^[^\u4e00-\u9fa5]+$/, message: <span class="string">&#x27;不可输入中文&#x27;</span>, trigger: <span class="string">&#x27;change&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="6-16进制（十六进制）"><a href="#6-16进制（十六进制）" class="headerlink" title="6. 16进制（十六进制）"></a>6. 16进制（十六进制）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    &#123; pattern: /^[0-9A-Fa-f]+$/, message: <span class="string">&quot;必须为16进制&quot;</span>, trigger: <span class="string">&quot;blur&quot;</span> &#125;,</span><br><span class="line">    </span><br><span class="line"><span class="comment">#    或</span></span><br><span class="line"></span><br><span class="line">    &#123;pattern: /^[A-Fa-f0-9]+$/, message: <span class="string">&#x27;必须是16进制字符&#x27;</span>, trigger: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br></pre></td></tr></table></figure><h2 id="7-字符长度"><a href="#7-字符长度" class="headerlink" title="7.字符长度"></a>7.字符长度</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; len: 4, message: <span class="string">&quot;必须为四字符&quot;</span>, trigger: <span class="string">&quot;blur&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="8-匹配"><a href="#8-匹配" class="headerlink" title="8.匹配"></a>8.匹配</h2><p>用于匹配一个字符串中所有符合以下条件的子串：</p><p>以斜杠（&#x2F;）开始。<br>紧接着是8个字母或数字字符（a-zA-Z0-9）。<br>最后以斜杠（&#x2F;）结束。<br>例如，在字符串 “<a href="https://example.com/path/to/resource">https://example.com/path/to/resource</a>“ 中，该正则表达式将匹配 “&#x2F;path&#x2F;to&#x2F;“。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;pattern: /\/([a-zA-Z0-9])&#123;8&#125;\//g, message: <span class="string">&#x27;必须是16进制字符&#x27;</span>, trigger: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> input </category>

          <category> 校验pattern </category>

      </categories>


    </entry>



    <entry>
      <title>2.正则表达式限制</title>
      <link href="/2024/06/29/vue3/input/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%99%90%E5%88%B6/"/>
      <url>/2024/06/29/vue3/input/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%99%90%E5%88%B6/</url>

        <content type="html"><![CDATA[<h2 id="1-限制input输入框只能输入大小写字母、数字、下划线的正则表达式："><a href="#1-限制input输入框只能输入大小写字母、数字、下划线的正则表达式：" class="headerlink" title="1.限制input输入框只能输入大小写字母、数字、下划线的正则表达式："></a>1.限制input输入框只能输入大小写字母、数字、下划线的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a-input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> onkeyup=<span class="string">&quot;this.value=this.value.replace(/[^\w_]/g,&#x27;&#x27;);&quot;</span>&gt; </span><br></pre></td></tr></table></figure><h2 id="2-限制input输入框只能输入小写字母、数字、下划线的正则表达式："><a href="#2-限制input输入框只能输入小写字母、数字、下划线的正则表达式：" class="headerlink" title="2.限制input输入框只能输入小写字母、数字、下划线的正则表达式："></a>2.限制input输入框只能输入小写字母、数字、下划线的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> onkeyup=<span class="string">&quot;this.value=this.value.replace(/[^a-z0-9_]/g,&#x27;&#x27;);&quot;</span>&gt; </span><br></pre></td></tr></table></figure><h2 id="3-限制input输入框只能输入数字和点的正则表达式："><a href="#3-限制input输入框只能输入数字和点的正则表达式：" class="headerlink" title="3.限制input输入框只能输入数字和点的正则表达式："></a>3.限制input输入框只能输入数字和点的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> onkeyup=<span class="string">&quot;value=value.replace(/[^\d.]/g,&#x27;&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="4-限制input输入框只能输入中文的正则表达式："><a href="#4-限制input输入框只能输入中文的正则表达式：" class="headerlink" title="4.限制input输入框只能输入中文的正则表达式："></a>4.限制input输入框只能输入中文的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> onkeyup=<span class="string">&quot;this.value=this.value.replace(/[^\u4e00-\u9fa5]/g,&#x27;&#x27;)&quot;</span>&gt;  </span><br></pre></td></tr></table></figure><h2 id="5-限制input输入框只能输入数字的正则表达式："><a href="#5-限制input输入框只能输入数字的正则表达式：" class="headerlink" title="5.限制input输入框只能输入数字的正则表达式："></a>5.限制input输入框只能输入数字的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> onkeyup=<span class="string">&quot;this.value=this.value.replace(/\D/g,&#x27;&#x27;)&quot;</span>/&gt;  </span><br></pre></td></tr></table></figure><h2 id="6-限制input输入框只能输入英文的正则表达式："><a href="#6-限制input输入框只能输入英文的正则表达式：" class="headerlink" title="6.限制input输入框只能输入英文的正则表达式："></a>6.限制input输入框只能输入英文的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> onkeyup=<span class="string">&quot;this.value=this.value.replace(/[^a-zA-Z]/g,&#x27;&#x27;)&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="7-限制input输入框只能输入中文、数字、英文的正则表达式："><a href="#7-限制input输入框只能输入中文、数字、英文的正则表达式：" class="headerlink" title="7.限制input输入框只能输入中文、数字、英文的正则表达式："></a>7.限制input输入框只能输入中文、数字、英文的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input onkeyup=<span class="string">&quot;value=value.replace(/[^\w\u4E00-\u9FA5]/g, &#x27;&#x27;)&quot;</span>/&gt;  </span><br></pre></td></tr></table></figure><h2 id="8-限制input输入框只能输入数字和字母的正则表达式："><a href="#8-限制input输入框只能输入数字和字母的正则表达式：" class="headerlink" title="8.限制input输入框只能输入数字和字母的正则表达式："></a>8.限制input输入框只能输入数字和字母的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input onKeyUp=<span class="string">&quot;value=value.replace(/[\W]/g,&#x27;&#x27;)&quot;</span>/&gt;  </span><br></pre></td></tr></table></figure><h2 id="9-限制input输入框除了英文的标点符号以外，其他的都可以。中文，英文字母，数字，中文标点的正则表达式："><a href="#9-限制input输入框除了英文的标点符号以外，其他的都可以。中文，英文字母，数字，中文标点的正则表达式：" class="headerlink" title="9.限制input输入框除了英文的标点符号以外，其他的都可以。中文，英文字母，数字，中文标点的正则表达式："></a>9.限制input输入框除了英文的标点符号以外，其他的都可以。中文，英文字母，数字，中文标点的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> onkeyup=<span class="string">&quot;this.value=this.value.replace(/^[^!@#$%^&amp;*()-=+]/g,&#x27;&#x27;)&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="10-限制input输入框-只能输入数字代码-小数点也不能输入-的正则表达式："><a href="#10-限制input输入框-只能输入数字代码-小数点也不能输入-的正则表达式：" class="headerlink" title="10.限制input输入框 只能输入数字代码(小数点也不能输入) 的正则表达式："></a>10.限制input输入框 只能输入数字代码(小数点也不能输入) 的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input onkeyup=<span class="string">&quot;this.value=this.value.replace(/\D/g,&#x27;&#x27;)&quot;</span> onafterpaste=<span class="string">&quot;this.value=this.value.replace(/\D/g,&#x27;&#x27;)&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="11-限制input输入框只能输入数字，能输小数点的正则表达式："><a href="#11-限制input输入框只能输入数字，能输小数点的正则表达式：" class="headerlink" title="11.限制input输入框只能输入数字，能输小数点的正则表达式："></a>11.限制input输入框只能输入数字，能输小数点的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input onkeyup=<span class="string">&quot;if(isNaN(value))execCommand(&#x27;undo&#x27;)&quot;</span> onafterpaste=<span class="string">&quot;if(isNaN(value))execCommand(&#x27;undo&#x27;)&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input onchange=<span class="string">&quot;if(/\D/.test(this.value))&#123;alert(&#x27;只能输入数字&#x27;);this.value=&#x27;&#x27;;&#125;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span></span><br><span class="line">onkeypress=<span class="string">&quot;if(!this.value.match(/^[\+\-]?\d*?\.?\d*?$/))this.value=this.t_value;ase this.t_value=this.value;if(this.value.match(/^(?:[\+\-]?\d+(?:\.\d+)?)?$/))this.o_value=this.value&quot;</span></span><br><span class="line">onkeyup=<span class="string">&quot;if(!this.value.match(/^[\+\-]?\d*?\.?\d*?$/))this.value=this.t_value;ase this.t_value=this.value;if(this.value.match(/^(?:[\+\-]?\d+(?:\.\d+)?)?$/))this.o_value=this.value&quot;</span></span><br><span class="line">onblur=<span class="string">&quot;if(!this.value.match(/^(?:[\+\-]?\d+(?:\.\d+)?|\.\d*?)?$/))this.value=this.o_value;ase&#123;if(this.value.match(/^\.\d+$/))this.value=0+this.value;if(this.value.match(/^\.$/))this.value=0;this.o_value=this.value&#125;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="12-限制input输入框只能输入字母和汉字的正则表达式："><a href="#12-限制input输入框只能输入字母和汉字的正则表达式：" class="headerlink" title="12.限制input输入框只能输入字母和汉字的正则表达式："></a>12.限制input输入框只能输入字母和汉字的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input onkeyup=<span class="string">&quot;value=value.replace(/[\d]/g,&#x27;&#x27;) &quot;</span>onbeforepaste=<span class="string">&quot;clipboardData.setData(&#x27;text&#x27;,clipboardData.getData(&#x27;text&#x27;).replace(/[\d]/g,&#x27;&#x27;))&quot;</span> maxlength=10 name=<span class="string">&quot;Numbers&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="13-限制input输入框只能输入英文字母和数字，不能输入中文的正则表达式："><a href="#13-限制input输入框只能输入英文字母和数字，不能输入中文的正则表达式：" class="headerlink" title="13.限制input输入框只能输入英文字母和数字，不能输入中文的正则表达式："></a>13.限制input输入框只能输入英文字母和数字，不能输入中文的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input onkeyup=<span class="string">&quot;value=value.replace(/[^\w\.\/]/ig,&#x27;&#x27;)&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="14-限制input输入框只能输入数字和英文的正则表达式："><a href="#14-限制input输入框只能输入数字和英文的正则表达式：" class="headerlink" title="14.限制input输入框只能输入数字和英文的正则表达式："></a>14.限制input输入框只能输入数字和英文的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input onKeyUp=<span class="string">&quot;value=value.replace(/[^\d|chun]/g,&#x27;&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="15-限制input输入框小数点后只能有最多两位-数字、中文都可输入-，不能输入字母和运算符号的正则表达式："><a href="#15-限制input输入框小数点后只能有最多两位-数字、中文都可输入-，不能输入字母和运算符号的正则表达式：" class="headerlink" title="15.限制input输入框小数点后只能有最多两位(数字、中文都可输入)，不能输入字母和运算符号的正则表达式："></a>15.限制input输入框小数点后只能有最多两位(数字、中文都可输入)，不能输入字母和运算符号的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input onKeyPress=<span class="string">&quot;if((event.keyCode&lt;48 || event.keyCode&gt;57) &amp;&amp; event.keyCode!=46 || /\.\d\d$/.test(value))event.returnValue=false&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="16-限制input输入框小数点后只能有最多两位-数字、字母、中文都可输入-，-可以输入运算符号-的正则表达式："><a href="#16-限制input输入框小数点后只能有最多两位-数字、字母、中文都可输入-，-可以输入运算符号-的正则表达式：" class="headerlink" title="16.限制input输入框小数点后只能有最多两位(数字、字母、中文都可输入)，&#x3D;&#x3D;可以输入运算符号:&#x3D;&#x3D;的正则表达式："></a>16.限制input输入框小数点后只能有最多两位(数字、字母、中文都可输入)，&#x3D;&#x3D;可以输入运算符号:&#x3D;&#x3D;的正则表达式：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input onkeyup=<span class="string">&quot;this.value=this.value.replace(/^(\-)*(\d+)\.(\d\d).*$/,&#x27;$1<span class="variable">$2</span>.<span class="variable">$3</span>&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="17-不可输入中文"><a href="#17-不可输入中文" class="headerlink" title="17.不可输入中文"></a>17.不可输入中文</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input  onkeyup=<span class="string">&quot;this.value=this.value.replace(/[\u4E00-\u9FA5]/g,&#x27;&#x27;)&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="18-不可输入空格"><a href="#18-不可输入空格" class="headerlink" title="18.不可输入空格"></a>18.不可输入空格</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a-input onkeyup=<span class="string">&quot;onkeyup=&quot;</span>value = value.replace(/\s+/g, <span class="string">&#x27;&#x27;</span>)<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> input </category>

          <category> 正则表达式限制 </category>

      </categories>


    </entry>



    <entry>
      <title>el-tree</title>
      <link href="/2024/06/27/vue3/el-tree/"/>
      <url>/2024/06/27/vue3/el-tree/</url>

        <content type="html"><![CDATA[<hr><h1 id="树的展开"><a href="#树的展开" class="headerlink" title="树的展开"></a>树的展开</h1><h2 id="展开所有"><a href="#展开所有" class="headerlink" title="展开所有"></a>展开所有</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">                &lt;el-form-item label=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">                  &lt;el-checkbox v-model=<span class="string">&quot;menuExpand&quot;</span> @change=<span class="string">&quot;handleCheckedTreeExpand(<span class="variable">$event</span>, &#x27;menu&#x27;)&quot;</span>&gt;展开/折叠</span><br><span class="line">                  &lt;/el-checkbox&gt;</span><br><span class="line">                  &lt;el-checkbox v-model=<span class="string">&quot;menuNodeAll&quot;</span> @change=<span class="string">&quot;handleCheckedTreeNodeAll(<span class="variable">$event</span>, &#x27;menu&#x27;)&quot;</span>&gt;全选/全不选</span><br><span class="line">                  &lt;/el-checkbox&gt;</span><br><span class="line">                  &lt;el-checkbox v-model=<span class="string">&quot;form.menuCheckStrictly&quot;</span> @change=<span class="string">&quot;handleCheckedTreeConnect(<span class="variable">$event</span>, &#x27;menu&#x27;)&quot;</span>&gt;父子联动</span><br><span class="line">                  &lt;/el-checkbox&gt;</span><br><span class="line">                  &lt;el-tree</span><br><span class="line">                      class=<span class="string">&quot;tree-border&quot;</span></span><br><span class="line">                      :data=<span class="string">&quot;menuOptions&quot;</span></span><br><span class="line">                      show-checkbox</span><br><span class="line">                      ref=<span class="string">&quot;menuRef&quot;</span></span><br><span class="line">                      node-key=<span class="string">&quot;id&quot;</span></span><br><span class="line">                      empty-text=<span class="string">&quot;暂无数据源&quot;</span></span><br><span class="line">                      :check-strictly=<span class="string">&quot;!form.menuCheckStrictly&quot;</span></span><br><span class="line">                      :props=<span class="string">&quot;&#123; label: &#x27;label&#x27;, children: &#x27;children&#x27; &#125;&quot;</span></span><br><span class="line">                  &gt;&lt;/el-tree&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line"><span class="comment">#                /** 树权限（展开/折叠）*/</span></span><br><span class="line"><span class="keyword">function</span> handleCheckedTreeExpand(value, <span class="built_in">type</span>) &#123;</span><br><span class="line">  console.log(value)</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">type</span> == <span class="string">&quot;menu&quot;</span>) &#123;</span><br><span class="line">    console.log(menuRef.value.store._getAllNodes())</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; menuRef.value.store._getAllNodes().length; i++) &#123;</span><br><span class="line">      menuRef.value.store._getAllNodes()[i].expanded = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">type</span> == <span class="string">&quot;dept&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">let</span> treeList = deptOptions.value;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; treeList.length; i++) &#123;</span><br><span class="line">      deptRef.value.store.nodesMap[treeList[i].<span class="built_in">id</span>].expanded = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="展开第一层级"><a href="#展开第一层级" class="headerlink" title="展开第一层级"></a>展开第一层级</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/** 树权限（展开/折叠）*/</span><br><span class="line"><span class="keyword">function</span> handleCheckedTreeExpand(value, <span class="built_in">type</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">type</span> == <span class="string">&quot;menu&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">let</span> treeList = menuOptions.value;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; treeList.length; i++) &#123;</span><br><span class="line">      menuRef.value.store.nodesMap[treeList[i].<span class="built_in">id</span>].expanded = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">type</span> == <span class="string">&quot;dept&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">let</span> treeList = deptOptions.value;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; treeList.length; i++) &#123;</span><br><span class="line">      deptRef.value.store.nodesMap[treeList[i].<span class="built_in">id</span>].expanded = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="展开指定层级"><a href="#展开指定层级" class="headerlink" title="展开指定层级"></a>展开指定层级</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> handleCheckedTreeExpand(value, <span class="built_in">type</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">type</span> == <span class="string">&quot;menu&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">let</span> treeList = menuOptions.value;</span><br><span class="line">    // <span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; menuRef.value.store._getAllNodes().length; i++) &#123;</span><br><span class="line">    //   menuRef.value.store._getAllNodes()[i].expanded = value;</span><br><span class="line">    // &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">let</span> i = 0; i &lt; treeList.length; i++) &#123;</span><br><span class="line">      menuRef.value.store.nodesMap[treeList[i].<span class="built_in">id</span>].expanded = value;</span><br><span class="line">      <span class="keyword">if</span> (treeList[i].children) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">let</span> j = 0; j &lt; treeList[i].children.length; j++) &#123;</span><br><span class="line">          <span class="keyword">if</span>(treeList[i].children[j].children)&#123;</span><br><span class="line">            menuRef.value.store.nodesMap[treeList[i].children[j].<span class="built_in">id</span>].expanded = value;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> vue3 </category>

          <category> el-tree </category>

      </categories>


    </entry>



    <entry>
      <title>1.安装redux</title>
      <link href="/2024/05/30/react/%E9%85%8D%E7%BD%AE/redux/redux%E5%AE%89%E8%A3%85/"/>
      <url>/2024/05/30/react/%E9%85%8D%E7%BD%AE/redux/redux%E5%AE%89%E8%A3%85/</url>

        <content type="html"><![CDATA[<h1 id="安装扩展程序"><a href="#安装扩展程序" class="headerlink" title="安装扩展程序"></a>安装扩展程序</h1><p>链接：<a href="https://pan.baidu.com/s/17ggewOjfpR_fRWhvHHUxug">https://pan.baidu.com/s/17ggewOjfpR_fRWhvHHUxug</a><br>提取码：zrch</p><p>下载完成之后得到Redux Devtools.crx文件，打开chrome浏览器的设置–&gt;扩展程序界面。直接将这个文件拖进这个界面就行了。</p><h1 id="安装reactRedux和redux"><a href="#安装reactRedux和redux" class="headerlink" title="安装reactRedux和redux"></a>安装reactRedux和redux</h1><p>redux：管理状态；<br>reactRedux：作者写出让开发者更方便书写代码的工具</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i redux react-redux --save</span><br></pre></td></tr></table></figure><h1 id="src下新建store，新建index-js"><a href="#src下新建store，新建index-js" class="headerlink" title="&#x2F;src下新建store，新建index.js"></a>&#x2F;src下新建store，新建index.js</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import &#123; legacy_createStore&#125; from <span class="string">&quot;redux&quot;</span>;</span><br><span class="line">import reducer from <span class="string">&quot;./reducer.js&quot;</span></span><br><span class="line">//创建数据仓库，让浏览器能正常使用ReduxDevtools</span><br><span class="line">const store  = legacy_createStore(reducer)</span><br><span class="line"><span class="built_in">export</span> default store</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> react </category>

          <category> 配置 </category>

          <category> redux </category>

      </categories>


    </entry>
    <entry>
      <title>3.安装React Developer Tools遇到的问题</title>
      <link href="/2024/05/24/react/%E9%85%8D%E7%BD%AE/%E5%AE%89%E8%A3%85React%20Developer%20Tools%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2024/05/24/react/%E9%85%8D%E7%BD%AE/%E5%AE%89%E8%A3%85React%20Developer%20Tools%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>

        <content type="html"><![CDATA[<h1 id="npm克隆"><a href="#npm克隆" class="headerlink" title="npm克隆"></a>npm克隆</h1><p>我先直接npm克隆了，然后安装它的依赖啥的，结果我根本没办法build出，然后看网上说换新的版本，换了，还是不成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/facebook/react-devtools</span><br><span class="line"><span class="built_in">cd</span> react-devtools</span><br><span class="line"></span><br><span class="line">npm --registry https://registry.npm.taobao.org install</span><br><span class="line">npm run build:extension:chrome</span><br></pre></td></tr></table></figure><h1 id="下载了扩展版本"><a href="#下载了扩展版本" class="headerlink" title="下载了扩展版本"></a>下载了扩展版本</h1><p>直接下载下来就能拖到浏览器加载为扩展程序，好嘛，浏览器又报错：React 项目启动在 chrome 上报错 之 Uncaught TypeError: Cannot read property ‘forEach‘ of undefined<br><img src="/./image/reactdev.png"><br>说让我找到node_modules&#x2F;@pmmmwh&#x2F;react-refresh-webpack-plugin&#x2F;client&#x2F;ReactRefreshEntry.js这个文件夹把下面这段代码注释重启项目就能解决，<br>好嘛我连这个文件夹都没有，安装了依赖，清除缓存都没有</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RefreshRuntime.injectIntoGlobalHook(safeThis);</span><br></pre></td></tr></table></figure><h1 id="换一个扩展程序版本"><a href="#换一个扩展程序版本" class="headerlink" title="换一个扩展程序版本"></a>换一个扩展程序版本</h1><p>网址：<a href="https://www.crx4chrome.com/crx/3068/">https://www.crx4chrome.com/crx/3068/</a><br>滑到下面下这个，我一开始看到差点下成广告的了，幸好进不去，嘿嘿<br><img src="/./image/download.png"><br>把之前的先关了，直接把新的拖进扩展程序即可，嘿，真不报错了，祝看到的你成功吧<br><img src="/./image/devexnew.png"></p>]]></content>


      <categories>

          <category> react </category>

          <category> 配置 </category>

          <category> React Developer Tools </category>

      </categories>


    </entry>
    <entry>
      <title>接口</title>
      <link href="/2024/05/16/vue3/%E6%8E%A5%E5%8F%A3/"/>
      <url>/2024/05/16/vue3/%E6%8E%A5%E5%8F%A3/</url>
        <content type="html"><![CDATA[<hr><h1 id="第一种：get方式"><a href="#第一种：get方式" class="headerlink" title="第一种：get方式"></a>第一种：get方式</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.1 普通get 不需要传参 只有URL和method</span></span><br><span class="line"><span class="built_in">export</span> const getNotice = () =&gt; &#123;</span><br><span class="line"><span class="built_in">return</span> axios(&#123;</span><br><span class="line">url: ‘/web/v1/web/notice’,</span><br><span class="line">method: ‘get’</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#1.2.1 get需要传参 使用data传参（params: data）</span></span><br><span class="line"><span class="comment">#params 属性用于将 data 对象中的键值对作为 URL 查询参数附加到请求的 URL 上。例如，如果 data 是 &#123;key1: &#x27;value1&#x27;, key2: &#x27;value2&#x27;&#125;，那么请求的 URL 将会是 /user/v1/account/topinfo?key1=value1&amp;key2=value2。</span></span><br><span class="line"><span class="comment">#所以data相当于自命名的一个变量，可以命名为query或任意其他单词</span></span><br><span class="line"><span class="built_in">export</span> const getTopInfo = (data) =&gt; &#123;</span><br><span class="line"><span class="built_in">return</span> axios(&#123;</span><br><span class="line">url: ‘/user/v1/account/topinfo’,</span><br><span class="line">method: ‘get’,</span><br><span class="line">params: data</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#1.2.2 get需要传参 使用json格式传参（data: data）</span></span><br><span class="line"><span class="comment">#data 属性用于将 data 对象作为请求体发送给服务器。这种情况下，服务器需要处理 JSON 格式的数据。</span></span><br><span class="line"><span class="built_in">export</span> const getTopInfo = (data) =&gt; &#123;</span><br><span class="line"><span class="built_in">return</span> axios(&#123;</span><br><span class="line">url: ‘/user/v1/account/topinfo’,</span><br><span class="line">method: ‘get’,</span><br><span class="line">data: data</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#或者直接把data: data用data简写，所以data相当于自命名的一个变量，可以命名为query、params或任意其他单词，例：</span></span><br><span class="line"><span class="built_in">export</span> const getTopInfo = (params) =&gt; &#123;</span><br><span class="line"><span class="built_in">return</span> axios(&#123;</span><br><span class="line">url: ‘/user/v1/account/topinfo’,</span><br><span class="line">method: ‘get’,</span><br><span class="line">params</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#1.3.1 get需要传参 使用url传参</span></span><br><span class="line"><span class="comment">#将 data 对象对作为 URL 查询参数附加到请求的 URL 上。例如，如果 data 是 &#123;key1: &#x27;value1&#x27;, key2: &#x27;value2&#x27;&#125;，那么请求的 URL 将会是/web/v4/guildTask/autoAssign/&#123;&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> const deleteAssign = <span class="keyword">function</span> (data) &#123;</span><br><span class="line"><span class="built_in">return</span> axios(&#123;</span><br><span class="line"><span class="comment">#  // url传参data或data.autoAssignId</span></span><br><span class="line">url: ‘/web/v4/guildTask/autoAssign/’ + data, </span><br><span class="line">method: ‘get’</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#1.3.2 get需要传参 使用url传参</span></span><br><span class="line"><span class="built_in">export</span> const deleteAssign = <span class="keyword">function</span> (data) &#123;</span><br><span class="line"><span class="built_in">return</span> axios(&#123;</span><br><span class="line">url: ‘/web/v4/guildTask/autoAssign?autoAssignId=’ + data.autoAssignId, // url传参</span><br><span class="line">method: ‘get’</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#还有多个拼接的，例子：</span></span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> transmit(<span class="built_in">type</span>,dataId) &#123;</span><br><span class="line">    <span class="built_in">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">&#x27;/orbit-elements/tle/sendTle?type=&#x27;</span> +<span class="built_in">type</span> +<span class="string">&#x27;&amp;dataId=&#x27;</span> +dataId,</span><br><span class="line">        method: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#和let param = &#123;</span></span><br><span class="line"><span class="comment">#  satelliteId: &#x27;123&#x27;,</span></span><br><span class="line"><span class="comment">#  pageNum: 1,</span></span><br><span class="line"><span class="comment">#  pageSize: 10,</span></span><br><span class="line"><span class="comment">#  name: &#x27;example&#x27;,</span></span><br><span class="line"><span class="comment">#  length: 5,</span></span><br><span class="line"><span class="comment">#  subPkgFlag: &#x27;flag&#x27;</span></span><br><span class="line"><span class="comment">#&#125;;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#let result = qs.stringify(param, &#123; arrayFormat: &quot;repeat&quot; &#125;);</span></span><br><span class="line"><span class="comment">#console.log(result); // 输出：satelliteId=123&amp;pageNum=1&amp;pageSize=10&amp;name=example&amp;length=5&amp;subPkgFlag=flag</span></span><br><span class="line"><span class="comment">#qs.stringify(param, &#123;arrayFormat: &quot;repeat&quot;&#125;) 最终会将 param 对象转换为一个 URL 查询字符串，其中数组元素会被重复表示</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> listPackage(query) &#123;</span><br><span class="line">  <span class="built_in">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;/telemetry-config/sourcePackage/list?&#x27;</span> + query,</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.3.3 get需要传参 使用url传参，$为占位符，如id为123， url为/system/cockpit/123</span></span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> deleteCockpit(<span class="built_in">id</span>) &#123;</span><br><span class="line">  <span class="built_in">return</span> request(&#123;</span><br><span class="line">    url: `/system/cockpit/<span class="variable">$&#123;id&#125;</span>`,</span><br><span class="line">    method: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#也有数组的：</span></span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> planTaskTest(<span class="built_in">id</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> request(&#123;</span><br><span class="line">        url: `/taskplan/plan/sendPlan?ids=<span class="variable">$&#123;id.ids&#125;</span>`,</span><br><span class="line">        method: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#同：把get换成方法类型即可</span></span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> getUser(userId) &#123;</span><br><span class="line">  <span class="built_in">let</span> emptyUserid = parseStrEmpty(userId)</span><br><span class="line">  <span class="built_in">return</span> api.get(`/system/user/<span class="variable">$&#123;emptyUserid&#125;</span>`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二种：put方式"><a href="#第二种：put方式" class="headerlink" title="第二种：put方式"></a>第二种：put方式</h1><h1 id="第三种：post方式"><a href="#第三种：post方式" class="headerlink" title="第三种：post方式"></a>第三种：post方式</h1><h1 id="第四种：delete方式"><a href="#第四种：delete方式" class="headerlink" title="第四种：delete方式"></a>第四种：delete方式</h1>]]></content>


      <categories>

          <category> vue3 </category>

          <category> 接口 </category>

      </categories>


    </entry>
    <entry>
      <title>监听</title>
      <link href="/2024/05/15/vue3/%E7%9B%91%E5%90%AC/"/>
      <url>/2024/05/15/vue3/%E7%9B%91%E5%90%AC/</url>


        <content type="html"><![CDATA[<hr><h1 id="监听对象为多个，可以写成数组"><a href="#监听对象为多个，可以写成数组" class="headerlink" title="监听对象为多个，可以写成数组"></a>监听对象为多个，可以写成数组</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch(</span><br><span class="line">() =&gt; [a,b,c],</span><br><span class="line">(val) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (val) &#123;</span><br><span class="line">    d=a-b-c</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> vue3 </category>

          <category> 监听 </category>

      </categories>


    </entry>
    <entry>
      <title>上传按钮</title>
      <link href="/2024/05/15/vue3/%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE/"/>
      <url>/2024/05/15/vue3/%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE/</url>

        <content type="html"><![CDATA[<hr><h1 id="表单中使用，传递文件对象："><a href="#表单中使用，传递文件对象：" class="headerlink" title="表单中使用，传递文件对象："></a>表单中使用，传递文件对象：</h1><p>action属性值为#,表示使用当前页面的URL作为上传的目标地址.action属性值为空字符串,表示需要手动指定上传的目标地址<br>show-file-list属性为false，表示不显示已上传文件的列表，默认不写为true<br>accept属性为.dat，表示只允许上传扩展名为.dat的文件<br>auto-upload属性为false，表示禁止自动上传文件<br>:http-request：<br>这是 Element UI 的 <el-upload> 组件的一个特殊属性，用于自定义文件上传的行为:你可以自定义请求的类型（如 GET、POST 等）、URL、数据格式和其他请求配置。<br>http-request 是 Element UI 特有的属性，不是 Vue.js 原生支持的属性。最终接口传递的文件对象是方法传递的对象中的file,方法只传递了一个对象,不能同时选中多个文件，但是可以后续出来再选择<br>:on-change：<br>这是 Vue.js 的原生自定义事件，用于监听组件的 change 事件。<br>:on-change 通常用于监听组件状态的变化，比如文件选择后的文件列表变化。<br>当设置 :on-change 属性时，你提供了一个方法（如 handleChange 函数），这个方法将在组件状态发生变化时被调用。<br>on-change 是 Vue.js 的事件监听系统的一部分，用于响应用户交互或其他导致数据变化的情境。最终接口传递的文件对象是方法传递的对象中的file,方法传递两个对象file和files，auto-upload属性为false，和change联合使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;el-form-item label=<span class="string">&quot;&quot;</span> ref=<span class="string">&quot;fileList&quot;</span>&gt;</span><br><span class="line">          &lt;el-upload</span><br><span class="line">              ref=<span class="string">&quot;uploadRef&quot;</span></span><br><span class="line">              v-model:file-list=<span class="string">&quot;fileList&quot;</span></span><br><span class="line">              class=<span class="string">&quot;avatar-uploader&quot;</span></span><br><span class="line">              action=<span class="string">&quot;#&quot;</span></span><br><span class="line">              :show-file-list=<span class="string">&quot;false&quot;</span></span><br><span class="line">              :http-request=<span class="string">&quot;handleChange&quot;</span></span><br><span class="line">              :on-remove=<span class="string">&quot;handleRemove&quot;</span></span><br><span class="line">          &gt;</span><br><span class="line">            &lt;el-button <span class="built_in">type</span>=<span class="string">&quot;primary&quot;</span>&gt;上传文件&lt;/el-button&gt;</span><br><span class="line">          &lt;/el-upload&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">const fileList = reactive([]);//用reactive定义可以接收数据回显</span><br><span class="line"><span class="built_in">let</span> formData = &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> handleChange(files) &#123;</span><br><span class="line">  <span class="built_in">let</span> file = files.file;</span><br><span class="line">  console.log(<span class="string">&#x27;file&#x27;</span>,file)</span><br><span class="line">  console.log(<span class="string">&#x27;files&#x27;</span>, files)</span><br><span class="line">  formData.value = new FormData();</span><br><span class="line">  formData.value.append(<span class="string">&quot;fzTmFile&quot;</span>, file);</span><br><span class="line">  fileup(formData.value).<span class="keyword">then</span>((res) =&gt; &#123;</span><br><span class="line">    if (res.code == <span class="number">200</span>) &#123;</span><br><span class="line">      let filedata = res.data</span><br><span class="line">      proxy.<span class="variable">$modal</span>.msgSuccess(&quot;上传文件成功！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#对应接口</span><br><span class="line">// 遥测文件上传</span><br><span class="line">export function fileup(data) &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#x27;/simulation/tm/uploadFzTmFile&#x27;,</span><br><span class="line">    method: &#x27;post&#x27;,</span><br><span class="line">    data: data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> vue3 </category>

          <category> 上传按钮 </category>

      </categories>


    </entry>



    <entry>
      <title>2.组件ant的使用</title>
      <link href="/2024/05/14/react/%E9%85%8D%E7%BD%AE/2.%E7%BB%84%E4%BB%B6ant%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/05/14/react/%E9%85%8D%E7%BD%AE/2.%E7%BB%84%E4%BB%B6ant%E7%9A%84%E4%BD%BF%E7%94%A8/</url>

        <content type="html"><![CDATA[<h1 id="安装-Antd-Design-和图标所需模块"><a href="#安装-Antd-Design-和图标所需模块" class="headerlink" title="安装 Antd Design,和图标所需模块"></a>安装 Antd Design,和图标所需模块</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install antd --save</span><br><span class="line">npm install --save @ant-design/icons</span><br></pre></td></tr></table></figure><h1 id="安装vite-plugin-style-import：-安装引入总报错-跳过，后面也注释的"><a href="#安装vite-plugin-style-import：-安装引入总报错-跳过，后面也注释的" class="headerlink" title="安装vite-plugin-style-import：(安装引入总报错,跳过，后面也注释的)"></a>安装vite-plugin-style-import：(安装引入总报错,跳过，后面也注释的)</h1><p>因为 vite 本身已经按需导入了组件库，所以只有样式不是按需导入的，所以只需按需导入样式即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vite-plugin-style-import -D</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="引入：在vite-config里引入"><a href="#引入：在vite-config里引入" class="headerlink" title="引入：在vite.config里引入"></a>引入：在vite.config里引入</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> react </category>

          <category> 配置 </category>

          <category> 组件ant的使用 </category>

      </categories>


    </entry>



    <entry>
      <title>4.路径别名的配置</title>
      <link href="/2024/05/14/react/%E9%85%8D%E7%BD%AE/4.%E8%B7%AF%E5%BE%84%E5%88%AB%E5%90%8D%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/05/14/react/%E9%85%8D%E7%BD%AE/4.%E8%B7%AF%E5%BE%84%E5%88%AB%E5%90%8D%E7%9A%84%E9%85%8D%E7%BD%AE/</url>

        <content type="html"><![CDATA[<h1 id="路径别名的配置："><a href="#路径别名的配置：" class="headerlink" title="路径别名的配置："></a>路径别名的配置：</h1><p>注：安装过程出现 reify:fsevents: timing reifyNode:node_modules&#x2F;@esbuild&#x2F;aix-ppc64 Completed<br>我还以为是出现了什么错其实就是一个日志记录。如果你看到这条信息，并不需要采取任何行动，它只是一个状态更新，表明npm或yarn在安装依赖时已经完成了某个步骤。耐心等待完成再执行下面的步骤吧</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> npm i -D @types/node</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">import path from <span class="string">&quot;path&quot;</span>;</span><br><span class="line"><span class="built_in">export</span> default defineConfig(&#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="built_in">alias</span>: &#123;</span><br><span class="line">       // 设置别名</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>:</span><br><span class="line">          path.resolve(__dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="由于我提前安装了eslint-报错ESLint-‘-dirname’-is-not-defined-no-undef-，在-eslintrc-cjs中："><a href="#由于我提前安装了eslint-报错ESLint-‘-dirname’-is-not-defined-no-undef-，在-eslintrc-cjs中：" class="headerlink" title="由于我提前安装了eslint,报错ESLint: ‘__dirname’ is not defined.(no-undef)，在.eslintrc.cjs中："></a>由于我提前安装了eslint,报错ESLint: ‘__dirname’ is not defined.(no-undef)，在.eslintrc.cjs中：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  <span class="built_in">env</span>: &#123;</span><br><span class="line">    node: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果path还是报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import path from <span class="string">&quot;path&quot;</span>;</span><br></pre></td></tr></table></figure><p>至此，就创建完成了一个属于我们的本地react项目啦<del>如果还想在项目中使用别的技术，请安装相应的依赖即可</del></p>]]></content>


      <categories>

          <category> react </category>

          <category> 配置 </category>

      </categories>


    </entry>



    <entry>
      <title>3.scss安装和初步使用</title>
      <link href="/2024/05/14/react/%E9%85%8D%E7%BD%AE/3.scss%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/05/14/react/%E9%85%8D%E7%BD%AE/3.scss%E5%AE%89%E8%A3%85%E5%92%8C%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/</url>

        <content type="html"><![CDATA[<h1 id="接下来，安装scss-css预处理器，方便我们书写js-开发工具只在开发环境有用，不会打包）："><a href="#接下来，安装scss-css预处理器，方便我们书写js-开发工具只在开发环境有用，不会打包）：" class="headerlink" title="接下来，安装scss(css预处理器，方便我们书写js,开发工具只在开发环境有用，不会打包）："></a>接下来，安装scss(css预处理器，方便我们书写js,开发工具只在开发环境有用，不会打包）：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i --save-dev sass</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> react </category>

          <category> 配置 </category>

      </categories>


    </entry>



    <entry>
      <title>1.react项目的初始化配置</title>
      <link href="/2024/05/14/react/%E9%85%8D%E7%BD%AE/1.react%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/05/14/react/%E9%85%8D%E7%BD%AE/1.react%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</url>

        <content type="html"><![CDATA[<h1 id="启动：打开package-json，自命名启动端口号，和启动后自动打开"><a href="#启动：打开package-json，自命名启动端口号，和启动后自动打开" class="headerlink" title="启动：打开package.json，自命名启动端口号，和启动后自动打开"></a>启动：打开package.json，自命名启动端口号，和启动后自动打开</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vite --host --port 2804 --open&quot;</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="引入初始化样式，删除之前的，在main-js中引入"><a href="#引入初始化样式，删除之前的，在main-js中引入" class="headerlink" title="引入初始化样式，删除之前的，在main.js中引入"></a>引入初始化样式，删除之前的，在main.js中引入</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i reset-css</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> react </category>

          <category> 配置 </category>

      </categories>


    </entry>


    <entry>
      <title>1.Vue 不能检测变动的数组</title>
      <link href="/2024/05/08/vue3/Vue%20%E4%B8%8D%E8%83%BD%E6%A3%80%E6%B5%8B%E5%8F%98%E5%8A%A8%E7%9A%84%E6%95%B0%E7%BB%84/"/>
      <url>/2024/05/08/vue3/Vue%20%E4%B8%8D%E8%83%BD%E6%A3%80%E6%B5%8B%E5%8F%98%E5%8A%A8%E7%9A%84%E6%95%B0%E7%BB%84/</url>

        <content type="html"><![CDATA[<h1 id="当你利用索引直接设置一个项时，例如：vm-items-indexOfItem-newValue"><a href="#当你利用索引直接设置一个项时，例如：vm-items-indexOfItem-newValue" class="headerlink" title="当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] &#x3D; newValue"></a>当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] &#x3D; newValue</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>(arr,index,&#123;age:12,name:<span class="string">&#x27;wee&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> Vue 不能检测变动的数组 </category>

      </categories>


    </entry>


    <entry>
      <title>1.Echart-tooltips遇到的问题汇总</title>
      <link href="/2024/05/03/vue3/Echarts/Echarts-tooltips/"/>
      <url>/2024/05/03/vue3/Echarts/Echarts-tooltips/</url>

        <content type="html"><![CDATA[<h1 id="无法使用全局shallowRef，但是item效果达不到预期，用指示器"><a href="#无法使用全局shallowRef，但是item效果达不到预期，用指示器" class="headerlink" title="无法使用全局shallowRef，但是item效果达不到预期，用指示器"></a>无法使用全局shallowRef，但是item效果达不到预期，用指示器</h1><p>EChart 画图，由于初始化存储对象为组件传值对象，如果用全局shallowRef对象赋值，会每次mqtt更新视图，看起来像闪退，所以无法直接用shallowRef，<br>但是用item的tooltips,看起来效果没用那么好，所以可以用指示器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tooltip: &#123;</span><br><span class="line">    trigger: <span class="string">&quot;axis&quot;</span>,</span><br><span class="line">    axisPointer: &#123;</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">&#x27;cross&#x27;</span>,          // 指示器类型</span><br><span class="line">      axis: <span class="string">&#x27;auto&#x27;</span>,          // 指示器的坐标轴</span><br><span class="line">      snap: <span class="literal">true</span>,            // 坐标轴指示器是否吸附到具体的数值点上</span><br><span class="line">      z: 1,                  // 坐标轴指示器的 z 值,图形层级</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> Echart </category>

          <category> tooltips </category>

      </categories>


    </entry>
    <entry>
      <title>1.深拷贝</title>
      <link href="/2024/04/30/vue3/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2024/04/30/vue3/%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>

        <content type="html"><![CDATA[<h1 id="利用JSON的序列化和反序列化来实现深拷贝。这种方法简单易用，但它不能处理函数、正则表达式、undefined、NaN等特殊值，也不能处理对象中的循环引用。"><a href="#利用JSON的序列化和反序列化来实现深拷贝。这种方法简单易用，但它不能处理函数、正则表达式、undefined、NaN等特殊值，也不能处理对象中的循环引用。" class="headerlink" title="利用JSON的序列化和反序列化来实现深拷贝。这种方法简单易用，但它不能处理函数、正则表达式、undefined、NaN等特殊值，也不能处理对象中的循环引用。"></a>利用JSON的序列化和反序列化来实现深拷贝。这种方法简单易用，但它不能处理函数、正则表达式、undefined、NaN等特殊值，也不能处理对象中的循环引用。</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arr1.value = JSON.parse(JSON.stringify(optionOne.value))</span><br></pre></td></tr></table></figure><h1 id="cloneDeepAndFormat可能还包含格式化的功能，这意味着它不仅复制对象，还可能对对象进行某种形式的处理或调整"><a href="#cloneDeepAndFormat可能还包含格式化的功能，这意味着它不仅复制对象，还可能对对象进行某种形式的处理或调整" class="headerlink" title="cloneDeepAndFormat可能还包含格式化的功能，这意味着它不仅复制对象，还可能对对象进行某种形式的处理或调整"></a>cloneDeepAndFormat可能还包含格式化的功能，这意味着它不仅复制对象，还可能对对象进行某种形式的处理或调整</h1><p>注：通常能够处理各种数据类型，包括函数、正则表达式、循环引用等</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const nitem = cloneDeepAndFormat(item);</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> 深拷贝 </category>

      </categories>


    </entry>

    <entry>
      <title>1.路由的使用</title>
      <link href="/2024/04/28/vue3/%E8%B7%AF%E7%94%B1/"/>
      <url>/2024/04/28/vue3/%E8%B7%AF%E7%94%B1/</url>

        <content type="html"><![CDATA[<h1 id="定义（路由）组件。可以从其他文件-import-进来"><a href="#定义（路由）组件。可以从其他文件-import-进来" class="headerlink" title="定义（路由）组件。可以从其他文件 import 进来"></a>定义（路由）组件。可以从其他文件 import 进来</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const router = useRouter();</span><br></pre></td></tr></table></figure><h1 id="在路由文件里定义路由信息，最后一个文件夹用驼峰命名法"><a href="#在路由文件里定义路由信息，最后一个文件夹用驼峰命名法" class="headerlink" title="在路由文件里定义路由信息，最后一个文件夹用驼峰命名法"></a>在路由文件里定义路由信息，最后一个文件夹用驼峰命名法</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        path: <span class="string">&#x27;/TssTryEdit&#x27;</span>,</span><br><span class="line">        component: Layout,</span><br><span class="line">        hidden: <span class="literal">true</span>,</span><br><span class="line">        redirect: <span class="string">&#x27;noredirect&#x27;</span>,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">                component: () =&gt; import(<span class="string">&#x27;@/views/TssTry/edit.vue&#x27;</span>),</span><br><span class="line">                name: <span class="string">&#x27;TssTryEdit&#x27;</span>,</span><br><span class="line">                meta: &#123;title: <span class="string">&#x27;XX&#x27;</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h1 id="引用路由"><a href="#引用路由" class="headerlink" title="引用路由"></a>引用路由</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">router.push(&#123;</span><br><span class="line">    name: <span class="string">&quot;TssTryEdit&quot;</span>,</span><br><span class="line">     query: &#123;</span><br><span class="line">     </span><br><span class="line">     &#125;,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> 路由的使用 </category>

      </categories>


    </entry>
    <entry>
      <title>1.值的类型转换</title>
      <link href="/2024/04/26/vue3/%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2024/04/26/vue3/%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>

        <content type="html"><![CDATA[<h1 id="对象转数组，同时筛选不为空的值"><a href="#对象转数组，同时筛选不为空的值" class="headerlink" title="对象转数组，同时筛选不为空的值"></a>对象转数组，同时筛选不为空的值</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Object.values(<span class="string">&quot;对象&quot;</span>).filter(Boolean)</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> 值的类型转换 </category>

      </categories>


    </entry>

    <entry>
      <title>1.Echart画折线图遇到的问题汇总</title>
      <link href="/2024/04/25/vue3/Echarts/Echart%E7%94%BB%E6%8A%98%E7%BA%BF%E5%9B%BE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2024/04/25/vue3/Echarts/Echart%E7%94%BB%E6%8A%98%E7%BA%BF%E5%9B%BE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>

        <content type="html"><![CDATA[<h1 id="EChart-配置都写好了，但是无法显示图表：报错–index-vue-167-Can’t-get-DOM-width-or-height-Please-check-dom-clientWidth-an"><a href="#EChart-配置都写好了，但是无法显示图表：报错–index-vue-167-Can’t-get-DOM-width-or-height-Please-check-dom-clientWidth-an" class="headerlink" title="EChart 配置都写好了，但是无法显示图表：报错–index.vue:167 Can’t get DOM width or height. Please check dom.clientWidth an"></a>EChart 配置都写好了，但是无法显示图表：报错–index.vue:167 Can’t get DOM width or height. Please check dom.clientWidth an</h1><p>解决方法：<br>设置高度和宽度，在onMounted内添加clientWidth和clientHeight，chartOne是图层id；<br>如果不在onMounted内添加， 则会出现无法重复使用lineChartOne()的问题；<br>echarts.init也要写在这里面，写在lineChartOne()里会报错重复初始化了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  initData();</span><br><span class="line">  Object.defineProperty(document.getElementById(&#x27;chartOne&#x27;),&#x27;clientWidth&#x27;,&#123;get:function()&#123;return <span class="number">1000</span>;&#125;&#125;)</span><br><span class="line">  Object.defineProperty(document.getElementById(&#x27;chartOne&#x27;),&#x27;clientHeight&#x27;,&#123;get:function()&#123;return <span class="number">500</span>;&#125;&#125;)</span><br><span class="line">  mychartOne.value = echarts.init(document.getElementById(&#x27;chartOne&#x27;))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="EChart-当同一个页面重复调用该组件，会重复添加clientWidth和clientHeight报错，可以直接在style内添加"><a href="#EChart-当同一个页面重复调用该组件，会重复添加clientWidth和clientHeight报错，可以直接在style内添加" class="headerlink" title="EChart 当同一个页面重复调用该组件，会重复添加clientWidth和clientHeight报错，可以直接在style内添加"></a>EChart 当同一个页面重复调用该组件，会重复添加clientWidth和clientHeight报错，可以直接在style内添加</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;right_chart&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;chartOne&quot;</span> style=<span class="string">&quot;width: 100%;height:400px&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="EChart-当更新Y轴的数据源，折线标题不变化，而数据源打印已经变化"><a href="#EChart-当更新Y轴的数据源，折线标题不变化，而数据源打印已经变化" class="headerlink" title="EChart 当更新Y轴的数据源，折线标题不变化，而数据源打印已经变化"></a>EChart 当更新Y轴的数据源，折线标题不变化，而数据源打印已经变化</h1><p>这个问题可能是由于图表的缓存导致的。当你使用setOption方法更新图表时，如果数据源没有发生变化，<br>图表可能会继续使用之前的缓存数据进行渲染，而不是重新获取最新的数据。<br>可以尝试在更新图表之前清除图表的缓存。这可以通过调用clear方法来实现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> mychartOne = &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">lineChartOne</span></span>() &#123;</span><br><span class="line">  mychartOne.value.clear();</span><br><span class="line">  mychartOne.value.setOption(optionOne.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="EChart-vue3中使用echarts报Uncaught-in-promise-Error-Initialize-failed-invalid-dom-at-Module-init错误"><a href="#EChart-vue3中使用echarts报Uncaught-in-promise-Error-Initialize-failed-invalid-dom-at-Module-init错误" class="headerlink" title="EChart vue3中使用echarts报Uncaught (in promise) Error: Initialize failed: invalid dom. at Module.init错误"></a>EChart vue3中使用echarts报Uncaught (in promise) Error: Initialize failed: invalid dom. at Module.init错误</h1><p>:报这个错误是因为页面还没挂载上开始就加载echart,加一个延时函数，时间视情况而定！仅对于vue3使用echarts亲测有效！</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">let</span> mychartOne = echarts.init(document.getElementById(<span class="string">&#x27;chartOne&#x27;</span>))</span><br><span class="line">    mychartOne.setOption(optionOne.value)</span><br><span class="line">  &#125;,1000)</span><br></pre></td></tr></table></figure><h1 id="EChart拖拽组件单页面不能放置多个chart：生成一个随机数的ID，并动态绑定id"><a href="#EChart拖拽组件单页面不能放置多个chart：生成一个随机数的ID，并动态绑定id" class="headerlink" title="EChart拖拽组件单页面不能放置多个chart：生成一个随机数的ID，并动态绑定id"></a>EChart拖拽组件单页面不能放置多个chart：生成一个随机数的ID，并动态绑定id</h1><p>：当写死为 id&#x3D;”chartOne” 时，拖拽新的到页面中，每次都绑定第一个</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;right_chart&quot;</span> :<span class="built_in">id</span>=<span class="string">&quot;echarId&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="built_in">let</span> echarId = Math.random()</span><br><span class="line"><span class="built_in">let</span> mychartOne = echarts.init(document.getElementById(<span class="string">&#x27;echarId&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="EChart-多条折线图，数据的x轴不一样，且只能有一条x轴"><a href="#EChart-多条折线图，数据的x轴不一样，且只能有一条x轴" class="headerlink" title="EChart 多条折线图，数据的x轴不一样，且只能有一条x轴"></a>EChart 多条折线图，数据的x轴不一样，且只能有一条x轴</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">&#x27;折线图堆叠&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">        trigger: <span class="string">&#x27;axis&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    legend: &#123;</span><br><span class="line">        data: [<span class="string">&#x27;邮件营销&#x27;</span>, <span class="string">&#x27;联盟广告&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    xAxis: &#123;</span><br><span class="line">        // 根据x轴数据决定<span class="built_in">type</span>类型</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">&#x27;time&#x27;</span>, </span><br><span class="line">        boundaryGap: <span class="literal">false</span>,</span><br><span class="line">        // 注： x轴不指定data,自动会从series取</span><br><span class="line">    &#125;,</span><br><span class="line">    yAxis: &#123;</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    series: [</span><br><span class="line">         &#123;</span><br><span class="line">            name: <span class="string">&#x27;联盟广告&#x27;</span>,</span><br><span class="line">            <span class="built_in">type</span>: <span class="string">&#x27;line&#x27;</span>,data: [</span><br><span class="line">                [</span><br><span class="line">                <span class="string">&#x27;2020-11-26 00:00:00&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;6&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&quot;2020-11-26 01:00:00&quot;</span>,</span><br><span class="line">                <span class="string">&quot;6&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&quot;2020-11-26 02:00:00&quot;</span>,</span><br><span class="line">                <span class="string">&quot;6&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&quot;2020-11-26 03:00:00&quot;</span>,</span><br><span class="line">                <span class="string">&quot;5&quot;</span></span><br><span class="line">            ]</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;邮件营销&#x27;</span>,</span><br><span class="line">            <span class="built_in">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            data: [</span><br><span class="line">                [</span><br><span class="line">                <span class="string">&quot;2020-11-26 00:57:00&quot;</span>,</span><br><span class="line">                <span class="string">&quot;17.3&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&quot;2020-11-26 05:22:22&quot;</span>,</span><br><span class="line">                <span class="string">&quot;16.8&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&quot;2020-11-26 08:32:16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;17.3&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&quot;2020-11-26 08:40:57&quot;</span>,</span><br><span class="line">                <span class="string">&quot;17.8&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&quot;2020-11-26 08:46:54&quot;</span>,</span><br><span class="line">                <span class="string">&quot;18.3&quot;</span></span><br><span class="line">            ]</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">       </span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="EChart-tooltip-不显示的问题"><a href="#EChart-tooltip-不显示的问题" class="headerlink" title="EChart tooltip 不显示的问题"></a>EChart tooltip 不显示的问题</h1><p>：我是在初始化对象用全局对象存储时无法显示，在方法内部定义变量可以显示，然后将以下改为item就都可以显示了，但是只能在点上hover显示，不是在坐标轴<br>之后我把全局对象用shallowRef定义，就可以用axis啦~<br>和 ref() 不同，浅层 ref 的内部值将会原样存储和暴露，并且不会被深层递归地转为响应式。只有对 .value 的访问是响应式的。<br>shallowRef() 常常用于对大型数据结构的性能优化或是与外部的状态管理系统集成。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tooltip: &#123;</span><br><span class="line">    trigger: <span class="string">&#x27;axis&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">const mychartlList = shallowRef([])</span><br></pre></td></tr></table></figure><h1 id="EChart-作为可重复利用添加的单组件，可以在添加动态id后加下面代码，将该‘元素引用’保存到名为-setRefs-的方法中。e-document-getElementById-‘chartOne’"><a href="#EChart-作为可重复利用添加的单组件，可以在添加动态id后加下面代码，将该‘元素引用’保存到名为-setRefs-的方法中。e-document-getElementById-‘chartOne’" class="headerlink" title="EChart 作为可重复利用添加的单组件，可以在添加动态id后加下面代码，将该‘元素引用’保存到名为 setRefs 的方法中。e&#x3D;document.getElementById(‘chartOne’)"></a>EChart 作为可重复利用添加的单组件，可以在添加动态id后加下面代码，将该‘元素引用’保存到名为 setRefs 的方法中。e&#x3D;document.getElementById(‘chartOne’)</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:ref=<span class="string">&quot;(e) =&gt; setRefs(e)&quot;</span></span><br></pre></td></tr></table></figure><h1 id="EChart-在一个图里有多个Y轴，且Y轴数量和单位、类型很多，无法提前设定，但是数值轴和类目轴无法同时显示，若同时显示无法排序大小"><a href="#EChart-在一个图里有多个Y轴，且Y轴数量和单位、类型很多，无法提前设定，但是数值轴和类目轴无法同时显示，若同时显示无法排序大小" class="headerlink" title="EChart 在一个图里有多个Y轴，且Y轴数量和单位、类型很多，无法提前设定，但是数值轴和类目轴无法同时显示，若同时显示无法排序大小"></a>EChart 在一个图里有多个Y轴，且Y轴数量和单位、类型很多，无法提前设定，但是数值轴和类目轴无法同时显示，若同时显示无法排序大小</h1><h2 id="一开始没看到居然无法排序，解决：识别数据，当数据为数值，type设置value，其他类目设置category"><a href="#一开始没看到居然无法排序，解决：识别数据，当数据为数值，type设置value，其他类目设置category" class="headerlink" title="一开始没看到居然无法排序，解决：识别数据，当数据为数值，type设置value，其他类目设置category"></a>一开始没看到居然无法排序，解决：识别数据，当数据为数值，type设置value，其他类目设置category</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isNaN(arra[0])) &#123;</span><br><span class="line">                chartList[chartindex.value].arr.yAxis[j].<span class="built_in">type</span> = <span class="string">&#x27;value&#x27;</span></span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                chartList[chartindex.value].arr.yAxis[j].<span class="built_in">type</span> = <span class="string">&#x27;category&#x27;</span></span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure><h2 id="现在可以排序，但是数值轴和类目轴无法同时显示，同时显示要么排序出错，要么只能显示一个轴"><a href="#现在可以排序，但是数值轴和类目轴无法同时显示，同时显示要么排序出错，要么只能显示一个轴" class="headerlink" title="现在可以排序，但是数值轴和类目轴无法同时显示，同时显示要么排序出错，要么只能显示一个轴"></a>现在可以排序，但是数值轴和类目轴无法同时显示，同时显示要么排序出错，要么只能显示一个轴</h2><p>：给对应series设置index</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chartList[chartindex.value].arr.series[j].yAxisIndex = j</span><br></pre></td></tr></table></figure><h1 id="EChart-实时多个同时更新数据多时容易卡"><a href="#EChart-实时多个同时更新数据多时容易卡" class="headerlink" title="EChart 实时多个同时更新数据多时容易卡"></a>EChart 实时多个同时更新数据多时容易卡</h1><p>：使用throttle函数，限制画图次数，throttle默认模式为Leading,因为实际使用中，多数的Throttle场景是在指定时间间隔的开始处调用，比如防止按钮重复点击时，一般会响应第一次点击，而忽略之后的点击。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">throttle(</span><br><span class="line">      reRenderChart,</span><br><span class="line">      1000</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> Echart </category>

      </categories>


    </entry>

    <entry>
      <title>1.下载</title>
      <link href="/2024/04/17/vue3/%E4%B8%8B%E8%BD%BD/"/>
      <url>/2024/04/17/vue3/%E4%B8%8B%E8%BD%BD/</url>

        <content type="html"><![CDATA[<h1 id="通过前端自己把获取的数据下载为EXCEL"><a href="#通过前端自己把获取的数据下载为EXCEL" class="headerlink" title="通过前端自己把获取的数据下载为EXCEL"></a>通过前端自己把获取的数据下载为EXCEL</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">let</span> downData = []</span><br><span class="line">  //good数组为要下载的表格数据，但是最终要的格式有所改变，需要处理：</span><br><span class="line">  good.value.forEach(item =&gt; &#123;</span><br><span class="line">    <span class="built_in">let</span> res = [];</span><br><span class="line">    console.log(<span class="string">&#x27;item&#x27;</span>,item)</span><br><span class="line">    console.log(<span class="string">&#x27;item.channelNo&#x27;</span>,item.circle)</span><br><span class="line">    console.log(<span class="string">&#x27;item.mode&#x27;</span>,item.mode)</span><br><span class="line">    console.log(<span class="string">&#x27;item.BitRate&#x27;</span>,item.BitRate)</span><br><span class="line">    <span class="built_in">let</span> arr = []</span><br><span class="line">    arr.push(item.no1) //第一列数据</span><br><span class="line">    arr.push(item.satelliteCode)</span><br><span class="line">    downData.push(arr)</span><br><span class="line">  &#125;)</span><br><span class="line">  //宽度</span><br><span class="line">  const options = &#123;</span><br><span class="line">    <span class="string">&#x27;!cols&#x27;</span>: [</span><br><span class="line">      &#123;wpx: 134&#125;,</span><br><span class="line">      &#123;wpx: 134&#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">  const exportData = downData.map(item =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      <span class="string">&#x27;名称1&#x27;</span>: item[0],</span><br><span class="line">      <span class="string">&#x27;名称2&#x27;</span>: item[1],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">// 创建 Workbook 对象</span><br><span class="line">  const workbook = XLSX.utils.book_new();</span><br><span class="line">// 创建 Worksheet 对象</span><br><span class="line">  const worksheet = XLSX.utils.json_to_sheet(exportData);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (const key <span class="keyword">in</span> worksheet) &#123;</span><br><span class="line">    <span class="keyword">if</span> (worksheet[key] instanceof Object) &#123;</span><br><span class="line">      <span class="keyword">if</span> (worksheet[key].v) &#123;</span><br><span class="line">        worksheet[key].t = <span class="string">&#x27;s&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      worksheet[key].s = &#123;</span><br><span class="line">        alignment: &#123;</span><br><span class="line">          vertical: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">          horizontal: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">          indent: 0,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  worksheet[<span class="string">&#x27;!cols&#x27;</span>] = options[<span class="string">&#x27;!cols&#x27;</span>]</span><br><span class="line">// 将 Worksheet 添加到 Workbook 中,moment()是获取当前时间</span><br><span class="line">  XLSX.utils.book_append_sheet(workbook, worksheet, <span class="string">&#x27;Sheet1&#x27;</span>);</span><br><span class="line">  const <span class="built_in">tail</span> = <span class="string">&#x27;-&#x27;</span> + moment()</span><br><span class="line">// 生成 Excel 文件并下载</span><br><span class="line"></span><br><span class="line">  XLSX.writeFile(workbook, `下载文件名<span class="variable">$&#123;tail&#125;</span>.xlsx`);</span><br></pre></td></tr></table></figure><h1 id="通过调用接口直接下载："><a href="#通过调用接口直接下载：" class="headerlink" title="通过调用接口直接下载："></a>通过调用接口直接下载：</h1><p>param为传参，最后下载文件名为“名字-当前时间”<br>注：路径前后不加 &#x2F;</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const <span class="built_in">tail</span> = <span class="string">&#x27;-&#x27;</span> + moment().format(<span class="string">&#x27;YYYYMMDDHHmmss&#x27;</span>)</span><br><span class="line"><span class="built_in">let</span> param = &#123;</span><br><span class="line">    a: queryParams.a,</span><br><span class="line">    b: queryParams.b,</span><br><span class="line">    c: queryParams.c,</span><br><span class="line">    d: queryParams.d</span><br><span class="line">  &#125;</span><br><span class="line">proxy.download(<span class="string">&quot;路径&quot;</span>, &#123;</span><br><span class="line">      ...param,</span><br><span class="line">    &#125;, `名字<span class="variable">$&#123;tail&#125;</span>.xlsx`);</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> 下载 </category>

      </categories>


    </entry>

    <entry>
      <title>1.时间</title>
      <link href="/2024/04/17/vue3/%E6%97%B6%E9%97%B4/"/>
      <url>/2024/04/17/vue3/%E6%97%B6%E9%97%B4/</url>

        <content type="html"><![CDATA[<h1 id="当前时间的几种获取方法"><a href="#当前时间的几种获取方法" class="headerlink" title="当前时间的几种获取方法"></a>当前时间的几种获取方法</h1><p>注：要加格式，不然获取的只是时间戳，人看不懂，表示自1970年1月1日00:00:00（UTC）以来的毫秒数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">new Date().getTime().format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span><br><span class="line">moment().format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="加不同时间的几种获取方法"><a href="#加不同时间的几种获取方法" class="headerlink" title="加不同时间的几种获取方法"></a>加不同时间的几种获取方法</h1><h2 id="当前时间加上分钟，并格式化为-‘YYYY-MM-DD-HH-mm-ss’-的格式"><a href="#当前时间加上分钟，并格式化为-‘YYYY-MM-DD-HH-mm-ss’-的格式" class="headerlink" title="当前时间加上分钟，并格式化为 ‘YYYY-MM-DD HH:mm:ss’ 的格式"></a>当前时间加上分钟，并格式化为 ‘YYYY-MM-DD HH:mm:ss’ 的格式</h2><p>首先使用moment()获取当前时间，然后使用add()方法添加30分钟，最后使用format()方法将时间格式化为指定的格式。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">moment().add(+30, <span class="string">&#x27;minutes&#x27;</span>).format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="当前时间加上天，并格式化为-‘YYYY-MM-DD-HH-mm-ss’-的格式"><a href="#当前时间加上天，并格式化为-‘YYYY-MM-DD-HH-mm-ss’-的格式" class="headerlink" title="当前时间加上天，并格式化为 ‘YYYY-MM-DD HH:mm:ss’ 的格式"></a>当前时间加上天，并格式化为 ‘YYYY-MM-DD HH:mm:ss’ 的格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">moment().add(+1, <span class="string">&#x27;day&#x27;</span>).format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>),</span><br></pre></td></tr></table></figure><h2 id="以24小时为1天倒退，并格式化为-‘YYYY-MM-DD-HH-mm-ss’-的格式"><a href="#以24小时为1天倒退，并格式化为-‘YYYY-MM-DD-HH-mm-ss’-的格式" class="headerlink" title="以24小时为1天倒退，并格式化为 ‘YYYY-MM-DD HH:mm:ss’ 的格式"></a>以24小时为1天倒退，并格式化为 ‘YYYY-MM-DD HH:mm:ss’ 的格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">new Date(endDate.getTime() - 3600 * 1000 * hour * 24)</span><br></pre></td></tr></table></figure><h2 id="设置时间，Date为一个JavaScript的Date对象"><a href="#设置时间，Date为一个JavaScript的Date对象" class="headerlink" title="设置时间，Date为一个JavaScript的Date对象"></a>设置时间，Date为一个JavaScript的Date对象</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Date.setHours(0, 0, 0, 0)</span><br></pre></td></tr></table></figure><h1 id="不同格式："><a href="#不同格式：" class="headerlink" title="不同格式："></a>不同格式：</h1><p>1.YYYY-MM-DD HH:mm:ss（分隔型）<br>2.YYYYMMDDHHmmss（紧凑型）</p>]]></content>


      <categories>

          <category> 时间 </category>

      </categories>


    </entry>
    <entry>
      <title>2.把本地项目源码推到GitHub远程仓库</title>
      <link href="/2024/04/17/react/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/%E6%8A%8A%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8EGitHub%E7%9B%B8%E8%BF%9E%E5%B0%86%E6%BA%90%E7%A0%81%E6%8E%A8%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2024/04/17/react/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/%E6%8A%8A%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8EGitHub%E7%9B%B8%E8%BF%9E%E5%B0%86%E6%BA%90%E7%A0%81%E6%8E%A8%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>

        <content type="html"><![CDATA[<p>在第4步后，我运行了git push -u origin master，但是报错让我pull，我这时想起fetch后没看冲突，<br>git status查看有哪里冲突，又让我pull，不成功就执行了5，然后解决冲突后重新提交成功~，个人觉得可能是没解决冲突就push了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init //git初始化</span><br><span class="line">git fetch //远程仓库获取所有分支的最新数据,但并不会合并或更改你当前的工作分支,此时应该git status查看有哪里冲突然后解决冲突</span><br><span class="line">git branch -u origin/master master //将本地的 master 分支与远程仓库的 master 分支关联起来.-u 参数指定了上游分支,即远程跟踪的分支.这样设置后,可以使用简单的 git pull 或 git push 来同步数据而无需指定远程分支</span><br><span class="line">git remote set-head origin -a //这个命令设置了所有远程分支的 HEAD 引用,使其指向远程仓库的最新提交.-a 参数表示操作应用于所有远程分支</span><br><span class="line">git pull --allow-unrelated-histories</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;df&#x27;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>


      <categories>

          <category> github配置 </category>

      </categories>


    </entry>

    <entry>
      <title>1.通过 vite 创建一个 react 项目， 并通过 npm run dev 能在线下环境正确运行</title>
      <link href="/2024/04/17/react/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAreact%E9%A1%B9%E7%9B%AE/"/>
      <url>/2024/04/17/react/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAreact%E9%A1%B9%E7%9B%AE/</url>


        <content type="html"><![CDATA[<h1 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h1><p>1.首先，确保你已经安装了Node.js和npm。你可以在命令行中输入以下命令来检查它们的版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>我一开始的node.js版本安装久了点，提示让我更新，什么好几个方案，官网下载啊什么的，麻烦~<br>因为我已经有了这两，直接就在终端用命令更新，没有当时记录，不记得命令了，刚搜的，要是不对可以评论。更新最后版本是v21.7.1：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm cache clean -f</span><br><span class="line">npm install -g n</span><br><span class="line">n latest</span><br></pre></td></tr></table></figure><h1 id="接下来，运行以下命令来创建一个新的React项目："><a href="#接下来，运行以下命令来创建一个新的React项目：" class="headerlink" title="接下来，运行以下命令来创建一个新的React项目："></a>接下来，运行以下命令来创建一个新的React项目：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm create-vite my-project //运行后选择自己要的技术和框架就行</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>至此，就创建完成了一个属于我们的本地react项目啦<del>如果还想在项目中使用别的技术，请安装相应的依赖即可</del></p>]]></content>


      <categories>

          <category> github配置 </category>

      </categories>


    </entry>

    <entry>
      <title>如何创建react项目并部署到GitHub pages</title>
      <link href="/2024/04/16/react/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAreact%E9%A1%B9%E7%9B%AE%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0GitHub%20pages/"/>
      <url>/2024/04/16/react/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAreact%E9%A1%B9%E7%9B%AE%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0GitHub%20pages/</url>


        <content type="html"><![CDATA[<h1 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h1><a href="https://zzpzadie.github.io/2024/04/17/react/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAreact%E9%A1%B9%E7%9B%AE/?highlight=react%E9%A1%B9%E7%9B%AE" target="_blank">1.你已经通过 create-react-app 创建了一个 react 项目， 并通过 npm run dev 能在线下环境正确运行。</a><br/><a href="https://zzpzadie.github.io/2024/04/17/react/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/%E6%8A%8A%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8EGitHub%E7%9B%B8%E8%BF%9E%E5%B0%86%E6%BA%90%E7%A0%81%E6%8E%A8%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/?highlight=%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93" target="_blank">2.在 github 上已经创建了一个与你本地代码同步的分支--存放源码（master)～</a><br/><p>3.在GitHub仓库中–另外创建一个分支部署构建项目（gh-pages）<br>注：不同情况下可能有不同的效果，可以多尝试</p><h1 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h1><p>1.安装 gh-pages</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gh-pages --save-dev</span><br></pre></td></tr></table></figure><p>2.修改 package.json，添加主页路径homepage，网上有的是用GitHub pages，有的是像下面简单写，但是两种在我这写了好像没区别，就不加赘述。<br>部署的出入口deploy:gh-pages(出口，部署分支)，dist(入口，打包生成的文件夹)，仓库repository</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // ...</span><br><span class="line">  <span class="string">&quot;homepage&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    // ...</span><br><span class="line">    <span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;gh-pages -d dist&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">   <span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/zzpzadie/test.git&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.修改 vite.config.js,可以先执行后面的部署，如果部署后缺少主路径可以到这里添加,我的就是部署后网页访问接口少了仓库名<br>本来应该是https:&#x2F;&#x2F;用户名.github.io&#x2F;仓库名&#x2F;路径，但是访问的都是https:&#x2F;&#x2F;用户名.github.io&#x2F;路径</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">base:<span class="string">&#x27;/test/&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h1><p>1.Github Pages 无法识别 React 代码，只能识别 html,css,js，故你需要先打包编译你的项目：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>2.你会发现你的项目目录多了一个 build 文件夹，这就是要部署的文件夹，终端执行以下代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><p>3.这时 github 上项目就多出了一个gh-pages的分支，在设置中Github Pages处选择gh-pages分支保存，部署完成。<br>过几分钟你再点击生成的链接即可访问你的页面，与线下环境下的页面相同即成功。详情如下：<br><img src="/./image/deployed.png"></p>]]></content>


      <categories>

          <category> github配置 </category>

      </categories>


    </entry>

    <entry>
      <title>3.如何为GitHub上的项目生成一个可访问的网站</title>
      <link href="/2024/04/11/react/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/%E5%A6%82%E4%BD%95%E4%B8%BAGitHub%E4%B8%8A%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E5%8F%AF%E8%AE%BF%E9%97%AE%E7%9A%84%E7%BD%91%E7%AB%99/"/>
      <url>/2024/04/11/react/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/%E5%A6%82%E4%BD%95%E4%B8%BAGitHub%E4%B8%8A%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E5%8F%AF%E8%AE%BF%E9%97%AE%E7%9A%84%E7%BD%91%E7%AB%99/</url>


        <content type="html"><![CDATA[<h1 id="创建一个新的仓库"><a href="#创建一个新的仓库" class="headerlink" title="创建一个新的仓库"></a>创建一个新的仓库</h1><p><img src="/./image/cangku.png"></p><h1 id="填上如下信息，注意别勾选错，不然不成功"><a href="#填上如下信息，注意别勾选错，不然不成功" class="headerlink" title="填上如下信息，注意别勾选错，不然不成功"></a>填上如下信息，注意别勾选错，不然不成功</h1><p><img src="/./image/xinxi.png"></p><h1 id="在你所创建的项目界面点击settings-找到githubpages配置，个人分支名可能不同，没关系选则就好，然后刷新即可"><a href="#在你所创建的项目界面点击settings-找到githubpages配置，个人分支名可能不同，没关系选则就好，然后刷新即可" class="headerlink" title="在你所创建的项目界面点击settings,找到githubpages配置，个人分支名可能不同，没关系选则就好，然后刷新即可"></a>在你所创建的项目界面点击settings,找到githubpages配置，个人分支名可能不同，没关系选则就好，然后刷新即可</h1><p><img src="/./image/githubpages.png"></p>]]></content>


      <categories>

          <category> github配置 </category>

      </categories>


    </entry>

    <entry>
      <title>博客说明</title>
      <link href="/2024/03/30/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
      <url>/2024/03/30/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/</url>


        <content type="html"><![CDATA[<h2 id="本博客只是作者为了记录作者学习中遇到的一些当时不能解决的问题方案，"><a href="#本博客只是作者为了记录作者学习中遇到的一些当时不能解决的问题方案，" class="headerlink" title="本博客只是作者为了记录作者学习中遇到的一些当时不能解决的问题方案，"></a>本博客只是作者为了记录作者学习中遇到的一些当时不能解决的问题方案，</h2><h2 id="或者在此之前没有遇到的技术，将持续更新"><a href="#或者在此之前没有遇到的技术，将持续更新" class="headerlink" title="或者在此之前没有遇到的技术，将持续更新"></a>或者在此之前没有遇到的技术，将持续更新</h2><h3 id="导航栏-搜索：可以搜索文章相关字眼"><a href="#导航栏-搜索：可以搜索文章相关字眼" class="headerlink" title="导航栏-搜索：可以搜索文章相关字眼"></a>导航栏-搜索：可以搜索文章相关字眼</h3><h3 id="导航栏-总览：所有文章"><a href="#导航栏-总览：所有文章" class="headerlink" title="导航栏-总览：所有文章"></a>导航栏-总览：所有文章</h3><h3 id="导航栏-分类：还比较傻瓜，可以看侧边栏"><a href="#导航栏-分类：还比较傻瓜，可以看侧边栏" class="headerlink" title="导航栏-分类：还比较傻瓜，可以看侧边栏"></a>导航栏-分类：还比较傻瓜，可以看侧边栏</h3><h3 id="导航栏-友情链接：不重要"><a href="#导航栏-友情链接：不重要" class="headerlink" title="导航栏-友情链接：不重要"></a>导航栏-友情链接：不重要</h3><p><img src="/./image/haibiantian.jpg" alt="沙滩"></p>]]></content>



    </entry>

    <entry>
      <title>Hello World</title>
      <link href="/2024/03/27/hello-world/"/>
      <url>/2024/03/27/hello-world/</url>


        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>



    </entry>

</search>
